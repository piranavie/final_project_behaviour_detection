import math


class Config:
    """
    Allows user to user to control and change the parameters of the model for training and testing according to
    their needs. The config class contains setting for data augmentation parameters (such as horizontal flipping,
    vertical flipping and 90-degree rotation), anchor box scales and ratios, bounding box threshold scores, image
    resizing, number of region proposals, etc. These variable values are set as default values to process the training
    and testing.
    """

    def __init__(self):
        self.verbose = True

        self.network = 'vgg'

        # setting for data augmentation
        # Augment with horizontal flips in training
        self.use_horizontal_flips = False

        # Augment with vertical flips in training
        self.use_vertical_flips = False

        # Augment with 90 degree rotations in training
        self.rot_90 = False

        # anchor box scales
        self.anchor_box_scales = [128, 256, 512]

        # anchor box ratios
        self.anchor_box_ratios = [[1, 1], [1. / math.sqrt(2), 2. / math.sqrt(2)],
                                  [2. / math.sqrt(2), 1. / math.sqrt(2)]]

        # size to resize the smallest side of the image
        self.im_size = 600

        # image channel-wise mean to subtract
        self.img_channel_mean = [103.939, 116.779, 123.68]
        self.img_scaling_factor = 1.0

        # number of ROIs at once, Number of RoIs to process at once
        self.num_rois = 32

        # stride at the RPN (this depends on the network configuration)
        self.rpn_stride = 16

        self.balanced_classes = False

        # scaling the stdev
        self.std_scaling = 4.0
        self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

        # overlaps for RPN
        self.rpn_min_overlap = 0.3
        self.rpn_max_overlap = 0.7

        # overlaps for classifier ROIs
        self.classifier_min_overlap = 0.1
        self.classifier_max_overlap = 0.5

        # bbox_threshold
        self.bbox_threshold = 0.65

        # max_probability score
        self.max_probability = 70

        # placeholder for the class mapping, automatically generated by the parser
        self.class_mapping = None

        # Input path for weights
        self.base_net_weights = None

        # Location to store all the metadata related to the training (to be used when testing)
        self.train_config_output_filename = './data/config.pickle'

        # Number of epochs
        self.num_epochs = 5
        self.epoch_length = 1000

        # Train and Test image
        # Path to test data.
        self.test_file_path = './data/test_videos'
        self.model_path = './data/model_frcnn.hdf5'
        self.train_path_file = './data/annotate.csv'

        # Image results
        # Path to result
        self.results_path = './data'

        # Path to result image
        self.results_image_path = './data/results_images'
        # Path to result image file
        self.results_image_file = './data/results_images/image-{}.png'

        # Path to result video
        self.results_video_path = './data/result_videos'
        # Path to result video file
        self.results_video_file = './data/result_videos/video-{}.mp4'

        # Path for graph data
        self.result_graphs_path = './data/result_graphs'
        self.result_graphs_precision_recall_file = './data/result_graphs/precision_recall-{}.png'
        self.result_graphs_mean_average_precision_file = './data/result_graphs/mean_average_precision.png'
        self.result_graphs_predict_classes_file = './data/result_graphs/predict_classes.png'
        self.result_graphs_file = './data/result_graphs/{}.png'

        # Video Process
        # Path to save converted images
        self.train_images_dataset_path = "./data/train_images"
        self.train_videos_dataset_path = "./data/train_videos"
        self.train_videos_annotation_file = "./data/Temporal_Anomaly_Annotation.txt"
        # Path for recording the training process
        self.train_process_data_file = './data/train_process_data.csv'

        # Path for online graph and video data
        self.result_online_graphs_path = './static/assets/graph'
        self.result_online_videos_path = './static/assets/video'
        self.result_online_video_file = './static/assets/video/result.mp4'
        self.result_online_graphs_file = './static/assets/graph/{}.png'